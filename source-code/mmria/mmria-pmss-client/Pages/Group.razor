<fieldset style="@Control_Style">
    <legend>@Metadata.prompt</legend>

@foreach (var item  in Metadata.children)
{
    var dictionary_path = $"{MMRIA_Path}/{item.name}";
    var control_style = "";
    var prompt_style = "";

    if(UI_Specification.form_design.ContainsKey(dictionary_path))
    {
        var style_object = UI_Specification.form_design[dictionary_path];

        if(style_object.control != null)
        control_style = get_style_string(style_object.control.style);

        if(style_object.prompt != null)
        prompt_style = get_style_string(style_object.prompt.style);
    }

    @switch (item.type.ToUpper())
    {
        case "STRING":
        case "NUMBER":
            <p style="@prompt_style">@item.prompt</p>
            <input type="text" value="" style="@control_style"/>  
        break;

                    
        case "LIST":
        <p style="@prompt_style">@item.prompt</p>
        <select style="@control_style">

        @foreach (var option  in item.values)
        {

        }

        </select> 
        break;
        case "GROUP":
            
            <Group 
                Metadata="@item" 
                UI_Specification="@UI_Specification" 
                MMRIA_Path="@dictionary_path"
                Prompt_Style="@prompt_style"
                Control_Style="@control_style"
            > 
            </Group>
        break;
    }
        
}

</fieldset>
@code 
{

    [Parameter]
    public mmria.common.metadata.node Metadata { get; set; }

    [Parameter]
    public mmria.common.metadata.UI_Specification UI_Specification { get; set; }

    [Parameter]
    public string MMRIA_Path { get; set; }

    [Parameter]
    public string Prompt_Style { get; set; }

    [Parameter]
    public string Control_Style { get; set; }

    protected override async Task OnInitializedAsync()
    {
        System.Console.WriteLine("OnInitializedAsync");
       // metadata = await GetMetadata();
    }

    string get_style_string(string p_style_string)
    {
        //"{"position":"absolute","top":12,"left":8,"height":50,"width":110.219,"font-weight":"400","font-size":"16px","font-style":"normal","color":"rgb(0, 0, 0)"}"
        var result_array = p_style_string.TrimStart('{').TrimEnd('}').Replace("\"", "").Replace("color:rgb(0, 0, 0)", "color:rgb(0 0 0)").Split(",");
        var new_array = new List<string>();
        for(var i = 0; i < result_array.Length; i++)
        {
            var item = result_array[i];
            var pair = item.Split(":");
            if(pair.Length < 2) continue;
            switch(pair[0])
            {
                
                case "top": //12
                case "left": //8
                case "height": // 50
                case "width": //110.219
                
                case "font-size"://"16px"
                    if(!pair[1].Trim().EndsWith("px"))
                    {
                        pair[1] += "px";
                    }
                    new_array.Add($"{pair[0].Trim()}:{pair[1].Trim()}");
                    break;
                case "font-weight": //"400":
                case "font-style": //"normal"
                case "color"://"rgb(0, 0, 0)"
                case "position": //"absolute"
                default:
                    
                    new_array.Add($"{pair[0].Trim()}:{pair[1].Trim()}");
                break;
            }
        }
        var result = string.Join(";",new_array); 

        //result = result.Replace("\"", "").Replace("{","").Replace("}","").Replace(",", ";");

        return result;
    }

}
