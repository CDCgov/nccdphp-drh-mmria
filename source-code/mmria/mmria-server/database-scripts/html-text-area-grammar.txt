{
  function makeInteger(o) {
    return parseInt(o.join(""), 10);
  }
}
/*
 / = or

 <name> ["<human_readable>"] = <variable> | <rule>

 <variable> = <label>":"<rule>

An expression matching a literal string produces a JavaScript string containing matched text.
An expression matching repeated occurrence of some subexpression produces a JavaScript array with all the matches.

"literal"
[characters]
rule
( expression )
expression *
expression +
expression ?
& expression // return undefined and do not consume any input, otherwise consider the match failed.
! expression // return undefined and do not consume any input, otherwise consider the match failed.
& { predicate }



$ expression
label : expression

expression1 expression2 ... expressionn
Match a sequence of expressions and return their match results in an array.
expression { action }


built-in functions

expected(err_message):throws error
location(): {
  start: { offset: 23, line: 5, column: 6 },
  end:   { offset: 23, line: 5, column: 6 }
}

Expression
  = head:Term tail:(_ ("+" / "-") _ Term)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return result + element[3]; }
        if (element[1] === "-") { return result - element[3]; }
      }, head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return result * element[3]; }
        if (element[1] === "/") { return result / element[3]; }
      }, head);
    }

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / Integer

Integer "integer"
  = _ [0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = [ \t\n\r]*


<< tags >>
<html/>

<h1 - h6>
<p/>
<div/>
<span/>
<sup />
<sub />

<br/>
<hr/>

<ul/>
<ol/>
<li/>


<u/>
<i/>
<b/>
<s> -> strike through

<table />
<tr />
<th span=""/>
<td span=""/>


<< attributes >>

style="" 
    font-family, 
    font-size, 
    color, 
    background-color, 
    vertical-align, 
    align, 
    width, 
    height

span=""



*/


start = '<html>' w:(left_bracket word space?)* '</html>' {return w.length;} 
word = letter+
letter = [\[a-zA-Z0-9]
space = " "
left_bracket = '<'
right_bracket = [>]
end_right_bracket = '</'